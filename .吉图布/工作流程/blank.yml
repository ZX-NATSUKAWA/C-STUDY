# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.


struct Book
{
  char name[20];
  short price; // 55
};
int main()
{
  sreuct Book bl ={"C语言真难",55};
  printf("书名:%s\n",bl,name);
  printf("价格:%d\n",bl,price);
  return 0;
}

//分支语句和循环语句
//C语言是一门结构化的程序设计语言（顺序结构、选择结构、循环结构）
// 选择结构——分支语句
int main()
{
	int a = 0; // ;表示一条语句结束了
	; // 空语句
	return 0;
}
int main()
{
	int age = 10;
	if (age < 18)
		printf("未成年\n");  //到这一步是单分支
	else
		printf("成年\n");    //双分支
	return 0;
}
int main()
{
	int age = 21;
	if (age < 18)
	{
  printf("未成年\n");
  }
  else
  {
  if (age >= 18 && age < 28)
		printf("青年\n");
	else if (age >= 28 && age < 50)
		printf("壮年\n");
	else if (age >= 50 && age < 90)
		printf("老年\n");
	else
		printf("仙人\n");
   }
	return 0;
}
int main()
{
	int a = 0;
	int b = 2;
	if (a == 1)
	{
		if (b == 2)
			printf("hehe\n");
	}
	else
		    printf("haha\n");
	return 0;
}
//比较奇数
int main()
{
	int a = 4;
	if (a % 2 == 0)
		printf("偶数\n");
	else
		printf("奇数\n");
	return 0;
}
int main()
{
	int i = 1;
	while (i <= 100)
	{
		if (i % 2 == 1)
			printf(" % d", i);
		i++;
	}
	return 0;
}
int main()
{
	int i = 1;
	while (i <= 100)
	{
		if (i % 2 != 0)
			printf("%d", i);
		i+=2;
	}
	return 0;
}
int main()
{
	int day = 0;
	scanf("%d", &day);
	switch (day)
	{
		case 1:
			if (1 == day)
				printf("周末综合征\n");
		case 2:
		case 3:
		case 4:
		case 5:
			printf("工作日\n");
			break;
		case 6:
		case 7:
			printf("休息日\n");
			break; //最后一句加上break防止后续加代码，case7执行时把后面的也执行了。
		case 8:
			break;
		default:
			printf("输入错误\n");
			break;
	}
	return 0;
}
int main()
{
	int n = 1;
	int m = 2;
	switch (n)
	{ 
	case 1:m++;
	case 2:n++;
	case 3:
		switch(n) //switch允许嵌套使用
		{
	    case 1:n++;
		case 2:m++; n++;
			break;//用于跳出case3内的分支，进入原来的分支。
		}
	case 4:m++;
		break;
	default:
		break;
	}
	printf("m=%d,n=%d\n", m, n); // m=5 n=3
	return 0;
} 
