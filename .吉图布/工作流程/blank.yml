# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.


struct Book
{
  char name[20];
  short price; // 55
};
int main()
{
  sreuct Book bl ={"C语言真难",55};
  printf("书名:%s\n",bl,name);
  printf("价格:%d\n",bl,price);
  return 0;
}

//分支语句和循环语句
//C语言是一门结构化的程序设计语言（顺序结构、选择结构、循环结构）
// 选择结构——分支语句
int main()
{
	int a = 0; // ;表示一条语句结束了
	; // 空语句
	return 0;
}
int main()
{
	int age = 10;
	if (age < 18)
		printf("未成年\n");  //到这一步是单分支
	else
		printf("成年\n");    //双分支
	return 0;
}
int main()
{
	int age = 21;
	if (age < 18)
	{
  printf("未成年\n");
  }
  else
  {
  if (age >= 18 && age < 28)
		printf("青年\n");
	else if (age >= 28 && age < 50)
		printf("壮年\n");
	else if (age >= 50 && age < 90)
		printf("老年\n");
	else
		printf("仙人\n");
   }
	return 0;
}
int main()
{
	int a = 0;
	int b = 2;
	if (a == 1)
	{
		if (b == 2)
			printf("hehe\n");
	}
	else
		    printf("haha\n");
	return 0;
}
//比较奇数
int main()
{
	int a = 4;
	if (a % 2 == 0)
		printf("偶数\n");
	else
		printf("奇数\n");
	return 0;
}
int main()
{
	int i = 1;
	while (i <= 100)
	{
		if (i % 2 == 1)
			printf(" % d", i);
		i++;
	}
	return 0;
}
int main()
{
	int i = 1;
	while (i <= 100)
	{
		if (i % 2 != 0)
			printf("%d", i);
		i+=2;
	}
	return 0;
}
int main()
{
	int day = 0;
	scanf("%d", &day);
	switch (day)
	{
		case 1:
			if (1 == day)
				printf("周末综合征\n");
		case 2:
		case 3:
		case 4:
		case 5:
			printf("工作日\n");
			break;
		case 6:
		case 7:
			printf("休息日\n");
			break; //最后一句加上break防止后续加代码，case7执行时把后面的也执行了。
		case 8:
			break;
		default:
			printf("输入错误\n");
			break;
	}
	return 0;
}
int main()
{
	int n = 1;
	int m = 2;
	switch (n)
	{ 
	case 1:m++;
	case 2:n++;
	case 3:
		switch(n) //switch允许嵌套使用
		{
	    case 1:n++;
		case 2:m++; n++;
			break;//用于跳出case3内的分支，进入原来的分支。
		}
	case 4:m++;
		break;
	default:
		break;
	}
	printf("m=%d,n=%d\n", m, n); // m=5 n=3
	return 0;
} 
 循环结构——循环语句
int main()
{
	while (1)
		printf("hehe\n"); //无限循环打印hehe
	return 0;
}
int main()
{
	int i = 1;
	while (i <= 10)
	{
		if (5 == i)
			break; //打破循环
		printf(" %d",i);
		i++;
	}
	return 0;
}
int main()
{
	int i = 0;
	while (i <= 10)
	{
		//if (5 == i)
		//	continue; // continue后的不执行，返回while的判断。此处进入死循环
		i++;
		if (5 == i)
			continue;
		printf(" %d", i);
	}
	return 0;
}

int main()
{
	int ch = getchar();
	putchar(ch); //相当于printf("%c\n",ch);
	printf("%c\n", ch);
	return 0;
}
#define _CRT_SECURE_NO_WARNING 1
int main()
{
	int ch = 0;
	//输入ctrl+z此时getchar获取EOF结束循环
	while ((ch = getchar()) != EOF)  //EOF=end of file文件结束标志
	{
		putchar(ch);
	}
	return 0;
}
int main()
{
	int ret = 0;
	int ch =0;
	char password[20] = { 0 };
	printf("请输入密码：>");
	scanf("%s", password);  //输入缓冲区123456\n→输入函数123456
	printf("请确认（Y/N):>");
	while((ch = getchar()) != '\n')
	{
	  ;
	}
	ret = getchar();
	if (ret == 'Y')
	{
		printf("确认成功\n");
	}
	else
	{
		printf("放弃确认\n");
	}
	return 0;
}
int main()
{
	int i = 0;
	for (i = 1; i <= 10; i++) //将三个步骤放在了一起
	{
		printf("%d ", i);
	}
	return 0;
 }
int main()                      //计算阶乘求和
{
	int i = 0;
	int n = 0;
	int ret = 1;
	int sum = 0;
	int k = 0;
	scanf("%d", &k);
	for (n = 1; n <= k; n++)
	{
		ret = 1;
		for(i=1;i<=n;i++)
		{
			ret = ret * i;
		}
		sum = sum + ret;
	}
	printf("sum=%d\n", sum);
	return 0;
}
5
int main()
{
	int i = 0;
	char password[20] = { 0 };
	for (i = 0; i < 3; i++)
	{

		printf("请输入密码:>");
		scanf("%s", password);
		if (strcmp(password, "1210") == 0)  //等号不能用来比较两个字符串是否相等，应该使用一个库函数-strcmp
		{
			printf("登录成功\n");
			break;
		}
		else
			printf("密码错误\n");
	}
	if (3 == i)
		printf("三次密码均错误，退出程序\n");
	return 0;
}
6     //输入三个值排序，按从大到小输出
int main()                           
{
	int a = 0;
	int b = 0;
	int c = 0;
	scanf("%d%d%d", &a, &b, &c);
	if (a < b)
	{
		int tmp = a;
		a = b;
		b = tmp;
	}
	if (a < c)
	{
		int tmp = a;
		a = c;
		c = tmp;
	}
	if (b < c)
	{
		int tmp = b;
		b = c;
		c = tmp;
	}
	printf("%d %d %d\n", a, b, c);
	return 0;
}
7     //打印1-100之间的所有3的倍数
int main()
{
	int i = 0;
	for(i = 1;i < 100; i++)
	{
		if (i % 3 == 0)
			printf("%d ", i);
	}
	return 0;
}
8      //给两个数，求最大公约数
int main()
{
	int a = 0;
	int b = 0;
	scanf("%d%d", &a, &b);
	int r = 0;
	while (a % b)  //辗转相除法
	{
		r = a % b;
		a = b;
		b = r;
	}
	printf("%d\n", b);
	return 0l;
}
8          //打印闰年
int main()
{
	int year = 0;
	int count = 0;
	for (year = 1000; year <= 2000; year++)
	{
		if (year % 4 == 0 && year % 100 != 0)
		{
			printf("%d ", year);
			count++;
		}
		else if (year % 400 == 0)
		{
			printf("%d ", year);
			count++;
		}
	}
	printf("\ncount =%d\n", count);
	return 0;
}
int main()
{
	int year = 0;
	int count = 0;
	for (year = 1000; year <= 2000; year++)
	{
		if (((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0))
		{
			printf("%d ", year);
			count++;
		}
	}
	printf("\ncount =%d\n", count);
	return 0;
}
9     //打印素数
int main()
{
	int i = 0;
	int count = 0;
	for (i = 100; i <= 200; i++)  //试除法
	{
		int j = 0;
		for (j = 2; j < i; j++)
		{
			if (i % j == 0)
			{
				break;
			}
		}
		if (j == i)
		{
			count++;
			printf("%d ", i);
		}
	}
	printf("\ncount =%d\n", count);
	return 0;
}
1  //数9的个数
int main()
{
	int i = 0;
	int count = 0;
	for (i = 1; i <= 100; i++)
	{
		if (i % 10 == 9)
			count++;
		if (i / 10 == 9)
			count++;
	}
	printf("count = %d\n", count);
	return 0;
}
2    //分数求和
int main()
{
	int i = 0;
	double sum = 0.0;
	int flag = 1;
	for (i = 1; i <= 100; i++)
	{
		sum += flag*1.0 / i;
		flag = -flag;
	}
	printf("%lf\n", sum);
	return 0;
}
3       //十个数找最大值
int main()
{
	int arr[] = { 1,2,3,4,5,6,7,8,9,10 };
	int max = arr[0];
	int i = 0;
	int sz = sizeof(arr) / sizeof(arr[0]);
	for (i = 0; i < sz; i++)
	{
		if (arr[i] > max)
		{
			max = arr[i];
		}
	}
	printf("max =%d\n", max);
	return 0;
}
4     //屏幕上输出99乘法表
int main()
{
	int i = 0;
	for (i = 1; i <= 9; i++)
	{
		int j = 1;
		for (j = 1; j <= i; j++)
		{
			printf("%d*%d=%-2d ", i, j, i * j);  //%2d表示打印两位，不够自动右对齐；%-2d自动左对齐
		}
		printf("\n");
	}
	return 0;
}
void menu()
{
	printf("猜数字\n");
	printf("***  1.play  0.exit  ***\n");
}
void game()
{
	
	int ret = 0;   
	int guess = 0;
	ret = rand()%100+1;   // 伪随机函数rand 生成0到7FFFH之间的一个任意整数。可以通过取模限定范围
	//printf("%d\n", ret);
	while (1)
	{
		printf("请猜数字：>");
		scanf("%d", &guess);
		if (guess > ret)
		{
			printf("猜大了\n");
		}
		else if (guess < ret)
		{
			printf("猜小了\n");
		}
		else
		{
			printf("猜对了\n");
			break;
		}
	}
}
int main()
{
	int input = 0;
	srand((unsigned int)time(NULL)); // 时间戳 当前时间和计算机起始时间（1970.01.01 00：00）的差值——一直在变化
	do
	{

		menu();
		printf("请选择>:");
		scanf("%d", &input);
		switch (input)
		{
		case 1:
			game();
			break;
		case 0:
			printf("退出游戏\n");
			break;
		default:
			printf("选择错误\n");
			break;
		}
	} while (input);
	return 0;
}
函数
  函数是什么：大型程序的部分代码，解决特定问题，相对独立。 分为库函数和自定义函数
int Add(int x, int y)
{
	int z = 0;
	z = x + y;
	return z;
}
int main()
{
	int a = 20;
	int b = 10;
	int sum = Add(a, b);
	printf("%d\n", sum);
	return 0;
}
  库函数：现成函数，引用头文件就能使用
具体有：IO函数、字符串操作函数、字符操作函数、内存操作函数、时间/日期函数、数学函数、其他库函数。
int main()
{
	char arr1[] = "bit";
	char arr2[20] = "#####";
	strcpy(arr2, arr1);
	printf("%s\n", arr2);
	return 0;
}
int main()
{
	char arr[] = "hehe haha";
	memset(arr, '*', 5);        //memset 内存设置
	printf("%s\n", arr);
	return 0;
}

  自定义函数：自己设计函数
ret_type fun_name(para1, *)  //类型 函数名+格式
{
	statement; //语句项，交代函数如何实现
}
int get_max(int x, int y)
{
	int z = 0;
    if (x > y)
       return x;
    else
       return y;
}
int main()
{
	int a = 10;
	int b = 20;
	int max = get_max (a, b);
	printf("max=%d\n", max);
	return 0;
}
void Swap(int* pa, int* pb)  // void代表没有返回值
{
	int tmp = 0;
	tmp = *pa;
	*pa = *pb;
	*pb = tmp;
}
int main()
{
	int a = 10;
	int* pa = &a;  //pa指针变量，用来存放a的地址
	*pa;//解引用操作，通过pa找到里面存的内容
	int b = 30;
	printf("a=%d b=%d\n", a, b);
	Swap(&a, &b);
	printf("a=%d b=%d\n", a, b);
	return 0;
}
  函数参数：形参、实参
  函数调用:函数与函数间有机组合。
  函数的嵌套调用和链式访问
 嵌套：函数里面套函数。
  链式访问：将一个函数的返回值作为下一函数的参数
int main()
{
	int len = 0;
	len = strlen("abc");
	printf("%d\n", len);
	printf("%d\n", strlen("abc")); // 链式访问
	return 0;
}
int main()
{
	printf("%d", printf("%d", printf("%d", 43))); //printf的返回值是打印在屏幕上字符的个数
	return 0;
}
  函数的声明和定义
 #include"函数.h"  //函数声明
int main()
{
	int a = 10;
	int b = 20;
	int sum = 0;
	sum = Add(a, b);
	printf("%d\n", sum);
	return 0;
}
  函数递归:程序调用自身的编程技巧。将一个大型复杂问题转化为一个与原问题相似的规模较小的问题来求解。
  必要条件：存在限制条件，达到限制条件后停止递归。  每次递归越来越逼近限制条件。
int main()
{
	printf("hrhr\n");
	main();              // main函数套main函数
	return 0;            //递归常见错误：栈溢出
}
void print(int n)
{
	if (n > 9)
	{
		print(n / 10);
	}
	printf("%d ", n % 10);
}
int main()
{
	unsigned int num = 0;
	scanf("%d", &num);
	print(num);
	return 0;
}
int my_strlen(char* str)    //利用循环模拟strlen函数
{
	int count = 0;            // 创建了临时变量count
	while (*str != '\0')
	{
		count++;
		str++;
	}
	return count;
}
int main()
{
	char arr[] = "bit";
	/*int len = strlen(arr);*/
	int len = my_strlen(arr);  //数组传参，传的是首元素地址
	printf("%d\n", len);
	return 0;
}
int my_strlen(char* str)     //利用递归模拟strlen函数
{
	if (*str != '\0')        //无临时变量
		return 1 + my_strlen(str + 1);
	else
		return 0;
}
int main()
{
	char arr[] = "bit";
	int len = my_strlen(arr);
	printf("%d\n", len);
	return 0;
}
